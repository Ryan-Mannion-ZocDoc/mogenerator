// DO NOT EDIT. This file is machine-generated and constantly overwritten.
// Make changes to <$managedObjectClassName$>.swift instead.

import CoreData
<$if hasAdditionalHeaderFile$>import <$additionalHeaderFileName$><$endif$>
<$if hasCustomBaseCaseImport$>import <$baseClassImport$><$endif$>


extension <$managedObjectClassName$> {
	
	// MARK: - Class methods

    <$if (hasCustomSuperclass || (hasCustomSuperentity && TemplateVar.overrideBaseClass))$>override <$endif$>open class func entityName () -> String {
        return "<$name$>"
    }

	<$if (hasCustomSuperclass || (hasCustomSuperentity && TemplateVar.overrideBaseClass))$>override <$endif$>@nonobjc
    open class func fetchRequest() -> NSFetchRequest<<$name$>> {
        return NSFetchRequest(entityName: self.entityName())
    }
	
	<$if noninheritedAttributes.@count > 0$>
	public enum Attributes {<$foreach Attribute noninheritedAttributes do$>
		public static let <$Attribute.name$> = "<$Attribute.name$>"<$endforeach do$>
	}
	<$endif$>

	<$if noninheritedRelationships.@count > 0$>
	public enum Relationships {<$foreach Relationship noninheritedRelationships do$>
		public static let <$Relationship.name$> = "<$Relationship.name$>"<$endforeach do$>
	}
	<$endif$>

	<$if noninheritedFetchedProperties.@count > 0$>
	public enum FetchedProperties {<$foreach FetchedProperty noninheritedFetchedProperties do$>
		public static let <$FetchedProperty.name$> = "<$FetchedProperty.name$>"<$endforeach do$>
	}
	<$endif$>

	<$if hasUserInfoKeys && userInfoKeyValues.@count > 0$>
	public enum UserInfo: String {<$foreach UserInfo userInfoKeyValues do$>
		public static let <$UserInfo.key$> = "<$UserInfo.key$>"<$endforeach do$>
	}
	<$endif$>
	
    // MARK: - Properties
<$foreach Attribute noninheritedAttributes do$>
<$if Attribute.hasDefinedAttributeType$>	
<$if Attribute.hasScalarAttributeType$>

<$if Attribute.isOptional$>
<$if Attribute.usesScalarAttributeType$>
	public<$if Attribute.isReadonly$>private(set)<$endif$> var <$Attribute.name$>: <$Attribute.scalarAttributeType$>? {
		get {
			let key = <$managedObjectClassName$>.Attributes.<$Attribute.name$>
			willAccessValue(forKey: key)
			defer { didAccessValue(forKey: key) }

			return primitiveValue(forKey: key) as? <$Attribute.scalarAttributeType$>
		}
		set {
			let key = <$managedObjectClassName$>.Attributes.<$Attribute.name$>
			willChangeValue(forKey: key)
			defer { didChangeValue(forKey: key) }

			guard let value = newValue else {
				setPrimitiveValue(nil, forKey: key)
				return
			}
			setPrimitiveValue(value, forKey: key)
		}
	}
<$else$>
	@NSManaged public<$if Attribute.isReadonly$>private(set)<$endif$> var <$Attribute.name$>: NSNumber?
<$endif$>
<$else$>
	@NSManaged public<$if Attribute.isReadonly$>private(set)<$endif$> var <$Attribute.name$>: <$if Attribute.usesScalarAttributeType$><$Attribute.scalarAttributeType$><$else$>NSNumber<$endif$>
<$endif$>

<$else$>
    @NSManaged public<$if Attribute.isReadonly$>private(set)<$endif$> var <$Attribute.name$>: <$Attribute.objectAttributeType$><$if Attribute.isOptional$>?<$endif$>
<$endif$>
<$endif$>
<$endforeach do$>

    // MARK: - Relationships
<$foreach Relationship noninheritedRelationships do$>
<$if Relationship.isToMany$>
    @NSManaged public var <$Relationship.name$>: Set<<$Relationship.destinationEntity.managedObjectClassName$>><$if Relationship.isOptional$>?<$endif$>
<$else$>
    @NSManaged public var <$Relationship.name$>: <$Relationship.destinationEntity.managedObjectClassName$><$if Relationship.isOptional$>?<$endif$>
<$endif$>
<$endforeach do$>

<$foreach FetchedProperty noninheritedFetchedProperties do$>
    @NSManaged open let <$FetchedProperty.name$>: [<$FetchedProperty.entity.sanitizedManagedObjectClassName$>]
<$endforeach do$>

}
